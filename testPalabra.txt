int cargarArchivo2(
    HashMapConcurrente &hashMap,
    std::string filePath,
    int i,
    std::vector<std::vector<std::pair<timespec,timespec>>>& tiempos
    ) {
    std::fstream file;
    int cant = 0;
    std::string palabraActual;
    // Abro el archivo.
    file.open(filePath, file.in);
    if (!file.is_open()) {
        std::cerr << "Error al abrir el archivo '" << filePath << "'" << std::endl;
        return -1;
    }
    int actualLetter;
    timespec letterStart, letterEnd;
    while (file >> palabraActual) {
        if(cant = 0){
            actualLetter = (unsigned int)palabraActual[0] - 'a';
            clock_gettime(CLOCK_REALTIME, &letterStart);
        }
        if(actualLetter != (unsigned int)palabraActual[0] - 'a')
        {
            clock_gettime(CLOCK_REALTIME, &letterEnd);
            tiempos[actualLetter-1].push_back(std::make_pair(letterStart,letterEnd));
            clock_gettime(CLOCK_REALTIME, &letterStart);
        }
        // Completar (Ejercicio 4)
        //file >> palabraActual ya carga en palabraActual un string
        hashMap.incrementar(palabraActual);
        cant++;
    }
    // Cierro el archivo.
    if (!file.eof()) {
        std::cerr << "Error al leer el archivo" << std::endl;
        file.close();
        return -1;
    }
    clock_gettime(CLOCK_REALTIME, &letterEnd);
    tiempos[actualLetter].push_back(std::make_pair(letterStart,letterEnd));
    file.close();
    return cant;
}