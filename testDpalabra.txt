b'0 5.3615e-05 4.5445e-05 3.9335e-05 4.0487e-05 3.9572e-05 0.00012923 4.3023e-05 3.907e-05 4.526e-05 4.0043e-05 4.3994e-05 4.3866e-05 4.0269e-05 4.3185e-05 3.9802e-05 9.8244e-05 3.5603e-05 3.4473e-05 3.9944e-05 4.1257e-05 3.5698e-05 4.1943e-05 4.1117e-05 3.8651e-05 4.5587e-05 \n0 0.000119904 0.000243062 9.0751e-05 5.2172e-05 4.3539e-05 5.4359e-05 4.2972e-05 4.2294e-05 4.8553e-05 4.3816e-05 5.3551e-05 5.1662e-05 4.3134e-05 4.6772e-05 4.3436e-05 4.3427e-05 4.5415e-05 4.3424e-05 4.6994e-05 5.0818e-05 4.4677e-05 4.5019e-05 4.3151e-05 4.5114e-05 4.7706e-05 \n0 8.8956e-05 6.7269e-05 3.9749e-05 4.0242e-05 3.8974e-05 3.6371e-05 4.179e-05 4.1576e-05 4.0859e-05 4.5307e-05 4.1539e-05 4.4265e-05 4.3731e-05 4.1263e-05 4.593e-05 6.1879e-05 3.6682e-05 4.3174e-05 3.9931e-05 4.4162e-05 4.7216e-05 4.3017e-05 4.5552e-05 4.423e-05 5.1147e-05 \n0 0.000104703 0.000108034 7.4122e-05 5.6413e-05 5.8633e-05 4.4102e-05 4.6138e-05 4.4692e-05 4.27e-05 4.5849e-05 4.348e-05 4.8268e-05 4.3843e-05 4.3442e-05 4.2922e-05 4.3976e-05 4.4631e-05 4.5276e-05 4.4276e-05 4.8217e-05 4.7157e-05 4.4314e-05 4.9219e-05 4.4637e-05 5.1204e-05 \n0 0.000174864 0.000139359 0.000102194 4.9723e-05 4.1395e-05 5.3048e-05 4.1482e-05 4.1128e-05 4.8461e-05 4.5228e-05 5.1666e-05 5.1041e-05 4.2023e-05 4.6594e-05 4.2886e-05 4.2947e-05 4.5363e-05 4.2767e-05 4.653e-05 5.1072e-05 4.3793e-05 4.498e-05 4.2542e-05 4.3838e-05 3.2707e-05 \n0 8.6026e-05 0.000105951 0.000135915 5.2922e-05 4.8802e-05 4.8306e-05 4.9921e-05 4.6242e-05 4.7097e-05 4.5512e-05 4.2482e-05 4.7451e-05 4.5761e-05 4.2187e-05 4.3568e-05 4.1786e-05 4.2004e-05 4.358e-05 4.4483e-05 4.6094e-05 4.2345e-05 4.3295e-05 4.2939e-05 3.5326e-05 3.6249e-05 \n0 9.1749e-05 8.5781e-05 6.8796e-05 5.0971e-05 5.6253e-05 4.4343e-05 4.5244e-05 4.4631e-05 4.2401e-05 4.5073e-05 4.3413e-05 4.7332e-05 4.3649e-05 4.2448e-05 4.3496e-05 4.4285e-05 4.4144e-05 4.4585e-05 4.4179e-05 4.7736e-05 4.7295e-05 4.3834e-05 4.5277e-05 4.664e-05 5.0268e-05 \n0 4.5557e-05 5.1974e-05 0.000941495 0.000209933 4.5972e-05 5.0009e-05 5.5283e-05 4.6709e-05 4.0654e-05 3.0375e-05 2.8217e-05 2.3369e-05 1.728e-05 1.7124e-05 1.7511e-05 1.7216e-05 1.8376e-05 2.6705e-05 2.6108e-05 2.6218e-05 1.745e-05 1.7481e-05 1.7646e-05 2.748e-05 1.8983e-05 \n0 6.8872e-05 0.000125535 0.0010918 8.0041e-05 3.9864e-05 4.4409e-05 4.753e-05 3.6249e-05 2.1862e-05 2.4882e-05 1.7778e-05 1.7009e-05 1.7054e-05 1.7029e-05 1.7305e-05 1.7074e-05 1.7014e-05 1.7148e-05 1.7352e-05 1.7197e-05 1.7406e-05 1.7132e-05 1.7015e-05 1.7096e-05 2.8841e-05 \n0 5.6076e-05 6.5635e-05 6.64e-05 5.3397e-05 4.926e-05 4.8627e-05 5.0571e-05 4.6779e-05 0.000130045 3.2412e-05 0.000486125 2.8394e-05 2.7448e-05 2.7794e-05 3.021e-05 3.1355e-05 3.1892e-05 3.1667e-05 3.1762e-05 3.0676e-05 2.7911e-05 2.8546e-05 2.7326e-05 2.8412e-05 2.9829e-05 \n\n'
-05 4.int cargarArchivo2(
    HashMapConcurrente &hashMap,
    std::string filePath,
    int i,
    std::vector<std::vector<std::pair<timespec,timespec>>>& tiempos
    ) {
    std::fstream file;
    int cant = 0;
    std::string palabraActual;
    // Abro el archivo.
    file.open(filePath, file.in);
    if (!file.is_open()) {
        std::cerr << "Error al abrir el archivo '" << filePath << "'" << std::endl;
        return -1;
    }
    int actualLetter;
    timespec letterStart, letterEnd;
    while (file >> palabraActual) {
        if(cant = 0){
            actualLetter = (unsigned int)palabraActual[0] - 'a';
            clock_gettime(CLOCK_REALTIME, &letterStart);
        }
        if(actualLetter != (unsigned int)palabraActual[0] - 'a')
        {
            clock_gettime(CLOCK_REALTIME, &letterEnd);
            tiempos[actualLetter-1].push_back(std::make_pair(letterStart,letterEnd));
            clock_gettime(CLOCK_REALTIME, &letterStart);
        }
        // Completar (Ejercicio 4)
        //file >> palabraActual ya carga en palabraActual un string
        hashMap.incrementar(palabraActual);
        cant++;
    }
    // Cierro el archivo.
    if (!file.eof()) {
        std::cerr << "Error al leer el archivo" << std::endl;
        file.close();
        return -1;
    }
    clock_gettime(CLOCK_REALTIME, &letterEnd);
    tiempos[actualLetter].push_back(std::make_pair(letterStart,letterEnd));
    file.close();
    return cant;
}

./build/ContarPalabrasExperimentar 10 0 1 ./Experimentos/data/Experimento3/generado0.txt ./Experimentos/data/Experimento3/generado1.txt ./Experimentos/data/Experimento3/generado2.txt ./Experimentos/data/Experimento3/generado3.txt ./Experimentos/data/Experimento3/generado4.txt ./Experimentos/data/Experimento3/generado5.txt ./Experimentos/data/Experimento3/generado.txt ./Experimentos/data/Experimento3/generado7.txt ./Experimentos/data/Experimento3/generado8.txt ./Experimentos/data/Experimento3/generado9.txt